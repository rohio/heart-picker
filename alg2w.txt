共通
□入力値
　　・ID
　　・日時範囲指定(左端)
　　・日時範囲指定(右端)
　　
　　・表示件数　5,10,20　選択式or範囲制限の入力式
　　
　　入力値チェック：
　　・日時指定の左端と右端が逆転したものを入力できないようにする。
　　・表示件数で範囲制限外の数値を入力できないようにする。
　　
□ページ
　　1.入力情報、ボタン、簡単な説明
　　2.入力情報、ボタン、結果、入力情報、ボタン、簡単な説明
　　
　　簡単な説明：　・IDを入力して、選択肢を選んでボタンを押す。
　　！上のほうが　・日時範囲が未指定だと、全件からランダムに選ばれる。
　　優先度高い！　・他人のものも覗けること(鍵は見れないよ)。
　　　　　　　　　・2010年11月より前の日時指定はできないよ。()
　　　　　　　　　・たくさん実行すると、制限がかかること。
　　　　　　　　　・日時指定が未指定だったり、日時範囲が広いと、最近のものが選ばれる確率が少しだけ高いこと。

□処理概要
1.ユーザの件数を取得。
1.1.入力値の日時をUNIX時に変換し、疑似IDを生成する。
2.表示するものを取得。
　A-1.範囲からランダムに抽出　最大5回ループ
　　1-a.50件より大きい、かつ日時範囲指定がない。→count=50, max_id=すべての乱数幅
　　1-b.50件より大きい、かつ日時範囲指定がある。→count=50, max_id=UNIX時変換後の乱数幅
　A-2.
　　2-a.A-1.で表示件数以上の件数を取得できれば、ループを終了し、3.に進む。
　　2-b.①A-1.で表示件数以上の件数を取得できなく、ループ回数が3以下の場合、
　　　　　　max_idの乱数幅の最低値に本ループでのmax_idを代入し、A-1.に戻る。
　　　　②A-1.で表示件数以上の件数を取得できなく、ループ回数が4以上の場合、
　　　　　　max_idを未設定とし、A-1.に戻る。
　B.最近50件を抽出　最大1回ループ
　　・50件より小さい。→count=50
3.配列をランダムに並べ替えて表示する。

日付の入力パターン
　【1～4回目のループ】日付指定内でランダムに取得する。$display_numを満たした場合はループ終了し、表示処理に移る。
　$display_numに満たない場合は、0回目のループで取得したいいねを表示する。
　start○end○：【max_id】rand_max=end_id rand_min=start_id 【since_id】start_id
　start×end○：【max_id】rand_max=end_id rand_min=0    【since_id】なし
　start○end×：【max_id】rand_max=Date rand_min=start_id   【since_id】start_id
　start×end×：【max_id】rand_max=Date rand_min=0  【since_id】なし
　【5回目のループ】日付指定内で最近$get_num件のものを取得し、保存しておく。
　start○end○：【max_id】end_id    【since_id】start_id
　start×end○：【max_id】end_id    【since_id】なし
　start○end×：【max_id】Date or なし  【since_id】start_id
　start×end×：【max_id】Date or なし  【since_id】なし
　　→5回目のループで$display_numに満たない場合は、
　　"指定した日付の範囲内で$display_num件のいいねがありませんでした。"
　　と出力し、処理終了。
　
◆max_id,since_idの値をどうするか
・since_idの指定の意義がないので、指定しない。
・max_idを乱数で生成することでランダムにできる。
　・ループ回数
　　A.4回呼び出しを行って、5件以上取得できない場合は、max_idを設定しないでGETする。
　　　呼び出しが最大5回となるので、1分に1回まで許容できる(75/15minのため)。
　・乱数幅の設定
　　・最大値：A-1.dateオブジェクトを作成して、現在時刻からIDを作成。
　　　　　　　　　・実行時に毎回設定？
　　　　　　　　　・1日に1回ぐらい動的に設定？
　　　　　　　A-2.入力値の日時(左端)から、IDを作成。
　　・最小値：A-1.0→N→M→･･･:1回目:0、2回目:1回目の値・・・とやれば、範囲を狭めながらできる。
　　　　　　　A-2.L→N→M→･･･:1回目:入力値の日時(右端)、2回目:1回目の値･･･。

◆APIを呼び出す回数をならべく減らしたい　(制限：75/15min)
・認証ごとの違い
　・AP認証(ベアラートークン)
　×：APごとに認証を行うため、全ユーザに対しAPで制限がかかるため、運用するには辛そう
　○：AP認証なので、ユーザが認証をする必要がない。
　　　要はAP認証画面で連携を認証する必要がない。
　　　連携に不信感を持つ人は少なくないと思うので、影響ありそう。
　・User認証(アクセストークン)
　×：ユーザごとに連携を認証する必要がある。
　○：ユーザごとに制限がかかるため、75/15minで運用できそう。

◆APIが正しい値を返却しない場合はエラー処理を行う
　・APIの使用回数制限にかかった場合
　・件数が5件より小さい場合
　・指定のIDのユーザが存在しない場合
　・認証ができなかった場合
　・何らかのエラーになった場合
　
◇追加機能
・いいねを外す※ユーザ認証必須
・limitの回復するまでの時間を表示

=================================old=================================

◆減らすアルゴリズム
　・抽出する範囲の選択肢を作る。【A】完全ランダム【B】最近1000件からランダム
　【A】・他に記述しているアルゴリズムと同様
　　　 ★4回呼び出しを行って、5件以上取得できない場合は、max_idを設定しないでGETする。
　　　 　呼び出しが最大5回となるので、1分に1回まで許容できる(75/15minのため)。
　【B】・count=200、max_idを毎回設定して、5回の呼び出しで最大1000件取得する。
　　　 ・800件以下の場合で、1度の呼び出しで取得できた件数が200件未満の場合は、
　　　 　そこでループから抜け出す。
　　　 ・200件ごとに設定するorユーザが1000件以下を任意で設定する仕様も考えたが、
　　　 　ユーザ目線だと、そこまで細かい設定はほしくないように思える。
　　　 　むしろ、面倒でよくわからないという印象を持たれるような気がする。
　★日付からIDを割り出せれば、日付指定でmax_idを指定したい。


◆数が少ない場合どうするか
★数を取得してNを閾値として場合わけ？
　・N以下：max_id未設定、count=>Nとして呼んでランダム5件
　・N以上：max_id設定、count=>nとして呼んでランダム5件
　　　　　　 nを200としても20としても処理時間の差がほとんどないので、200件取得してランダムのほうがよさそう。
　　　　　　 配列の長さが5以上であれば、ループを抜ける。


A.並んだ5件
×：表示するものが並ぶ
　　日時が固まっているところが取得しづらいかもしれない
○：最低1回呼べばOK
　　被ることを避ける処理が不要B.ランダム5件
×：最低5回呼ばなければならない
　　被る可能性が有るので、避ける処理が必要
○：並ばずに表示できる★C.並んだn件から5件をランダムに取り出す
×：表示するものが並ぶ
○：最低1回呼べばOK
　　被ることを避ける処理が不要
　　日時が固まっているところでも取得できる
コード
★1.配列を並び替えて、上から5個を取り出す
2.配列の長さを最大値として5個ランダムな値を、新しく作成した配列に格納し、拡張ループする。
